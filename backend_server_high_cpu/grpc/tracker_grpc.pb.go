// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.1
// source: grpc/tracker.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TickerManager2Client is the client API for TickerManager2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickerManager2Client interface {
	// get a ticker2 information
	SelectTicker2(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (*StockInfo, error)
	InsertTicker(ctx context.Context, in *StockInfo, opts ...grpc.CallOption) (*Status, error)
	DeleteTicker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (*Status, error)
}

type tickerManager2Client struct {
	cc grpc.ClientConnInterface
}

func NewTickerManager2Client(cc grpc.ClientConnInterface) TickerManager2Client {
	return &tickerManager2Client{cc}
}

func (c *tickerManager2Client) SelectTicker2(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (*StockInfo, error) {
	out := new(StockInfo)
	err := c.cc.Invoke(ctx, "/grpc.TickerManager2/SelectTicker2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerManager2Client) InsertTicker(ctx context.Context, in *StockInfo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/grpc.TickerManager2/InsertTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tickerManager2Client) DeleteTicker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/grpc.TickerManager2/DeleteTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickerManager2Server is the server API for TickerManager2 service.
// All implementations must embed UnimplementedTickerManager2Server
// for forward compatibility
type TickerManager2Server interface {
	// get a ticker2 information
	SelectTicker2(context.Context, *TickerRequest) (*StockInfo, error)
	InsertTicker(context.Context, *StockInfo) (*Status, error)
	DeleteTicker(context.Context, *TickerRequest) (*Status, error)
	mustEmbedUnimplementedTickerManager2Server()
}

// UnimplementedTickerManager2Server must be embedded to have forward compatible implementations.
type UnimplementedTickerManager2Server struct {
}

func (UnimplementedTickerManager2Server) SelectTicker2(context.Context, *TickerRequest) (*StockInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTicker2 not implemented")
}
func (UnimplementedTickerManager2Server) InsertTicker(context.Context, *StockInfo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertTicker not implemented")
}
func (UnimplementedTickerManager2Server) DeleteTicker(context.Context, *TickerRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTicker not implemented")
}
func (UnimplementedTickerManager2Server) mustEmbedUnimplementedTickerManager2Server() {}

// UnsafeTickerManager2Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickerManager2Server will
// result in compilation errors.
type UnsafeTickerManager2Server interface {
	mustEmbedUnimplementedTickerManager2Server()
}

func RegisterTickerManager2Server(s grpc.ServiceRegistrar, srv TickerManager2Server) {
	s.RegisterService(&TickerManager2_ServiceDesc, srv)
}

func _TickerManager2_SelectTicker2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerManager2Server).SelectTicker2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TickerManager2/SelectTicker2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerManager2Server).SelectTicker2(ctx, req.(*TickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickerManager2_InsertTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerManager2Server).InsertTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TickerManager2/InsertTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerManager2Server).InsertTicker(ctx, req.(*StockInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _TickerManager2_DeleteTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerManager2Server).DeleteTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TickerManager2/DeleteTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerManager2Server).DeleteTicker(ctx, req.(*TickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TickerManager2_ServiceDesc is the grpc.ServiceDesc for TickerManager2 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickerManager2_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TickerManager2",
	HandlerType: (*TickerManager2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectTicker2",
			Handler:    _TickerManager2_SelectTicker2_Handler,
		},
		{
			MethodName: "InsertTicker",
			Handler:    _TickerManager2_InsertTicker_Handler,
		},
		{
			MethodName: "DeleteTicker",
			Handler:    _TickerManager2_DeleteTicker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/tracker.proto",
}
