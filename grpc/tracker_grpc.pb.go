// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.1.0
// - protoc             v3.19.1
// source: grpc/tracker.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TickerManagerClient is the client API for TickerManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TickerManagerClient interface {
	// get a ticker information
	SelectTicker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (*StockInfo, error)
}

type tickerManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTickerManagerClient(cc grpc.ClientConnInterface) TickerManagerClient {
	return &tickerManagerClient{cc}
}

func (c *tickerManagerClient) SelectTicker(ctx context.Context, in *TickerRequest, opts ...grpc.CallOption) (*StockInfo, error) {
	out := new(StockInfo)
	err := c.cc.Invoke(ctx, "/grpc.TickerManager/SelectTicker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TickerManagerServer is the server API for TickerManager service.
// All implementations must embed UnimplementedTickerManagerServer
// for forward compatibility
type TickerManagerServer interface {
	// get a ticker information
	SelectTicker(context.Context, *TickerRequest) (*StockInfo, error)
	mustEmbedUnimplementedTickerManagerServer()
}

// UnimplementedTickerManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTickerManagerServer struct {
}

func (UnimplementedTickerManagerServer) SelectTicker(context.Context, *TickerRequest) (*StockInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectTicker not implemented")
}
func (UnimplementedTickerManagerServer) mustEmbedUnimplementedTickerManagerServer() {}

// UnsafeTickerManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TickerManagerServer will
// result in compilation errors.
type UnsafeTickerManagerServer interface {
	mustEmbedUnimplementedTickerManagerServer()
}

func RegisterTickerManagerServer(s grpc.ServiceRegistrar, srv TickerManagerServer) {
	s.RegisterService(&TickerManager_ServiceDesc, srv)
}

func _TickerManager_SelectTicker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TickerManagerServer).SelectTicker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.TickerManager/SelectTicker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TickerManagerServer).SelectTicker(ctx, req.(*TickerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TickerManager_ServiceDesc is the grpc.ServiceDesc for TickerManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TickerManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.TickerManager",
	HandlerType: (*TickerManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SelectTicker",
			Handler:    _TickerManager_SelectTicker_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/tracker.proto",
}
